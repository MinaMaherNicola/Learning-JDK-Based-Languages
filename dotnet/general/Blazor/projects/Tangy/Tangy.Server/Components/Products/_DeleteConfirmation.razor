@using Tangy.Models.DTOs
@using Tangy.Server.Service.Contracts
@inject IFileUpload fileUpload


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete @ToBeDeletedProduct.Name
            </div>
            @if (IsLoading)
            {
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-info" disabled>Loading</button>
                </div>
            }
            else
            {
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteProduct(ToBeDeletedProduct.Id)">Delete</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ProductDto ToBeDeletedProduct { get; set; } = null!;
    [Parameter]
    public EventCallback<Guid> DeleteProductFunctionality { get; set; }
    [Parameter]
    public bool IsLoading { get; set; }

    private async Task DeleteProduct(Guid id)
    {
        fileUpload.DeleteFile(ToBeDeletedProduct.ImageUrl);
        await DeleteProductFunctionality.InvokeAsync(id);
    }
}
